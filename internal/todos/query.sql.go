// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package todos

import (
	"context"
	"time"
)

const create = `-- name: Create :one
insert into todos (flake_id, scheduled_at)
values (?, ?)
returning id, flake_id, done, scheduled_at
`

type CreateParams struct {
	FlakeID     int64     `json:"flakeId"`
	ScheduledAt time.Time `json:"scheduledAt"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, create, arg.FlakeID, arg.ScheduledAt)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.FlakeID,
		&i.Done,
		&i.ScheduledAt,
	)
	return i, err
}

const deleteById = `-- name: DeleteById :exec
delete from todos
where id = ?
`

func (q *Queries) DeleteById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteById, id)
	return err
}

const getAll = `-- name: GetAll :many
select id, flake_id, done, scheduled_at from todos
`

func (q *Queries) GetAll(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.FlakeID,
			&i.Done,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllByFlakeId = `-- name: GetAllByFlakeId :many
select id, flake_id, done, scheduled_at from todos
where flake_id = ?
`

func (q *Queries) GetAllByFlakeId(ctx context.Context, flakeID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllByFlakeId, flakeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.FlakeID,
			&i.Done,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllByRange = `-- name: GetAllByRange :many
select t.id, t.flake_id, t.done, t.scheduled_at, f.id, f.name, f.description, f.bowl_id
from todos t
join flakes f on t.flake_id = f.id
where t.scheduled_at between ? and ?
`

type GetAllByRangeParams struct {
	FromScheduledAt time.Time `json:"fromScheduledAt"`
	ToScheduledAt   time.Time `json:"toScheduledAt"`
}

type GetAllByRangeRow struct {
	Todo  Todo  `json:"todo"`
	Flake Flake `json:"flake"`
}

func (q *Queries) GetAllByRange(ctx context.Context, arg GetAllByRangeParams) ([]GetAllByRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllByRange, arg.FromScheduledAt, arg.ToScheduledAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllByRangeRow{}
	for rows.Next() {
		var i GetAllByRangeRow
		if err := rows.Scan(
			&i.Todo.ID,
			&i.Todo.FlakeID,
			&i.Todo.Done,
			&i.Todo.ScheduledAt,
			&i.Flake.ID,
			&i.Flake.Name,
			&i.Flake.Description,
			&i.Flake.BowlID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getById = `-- name: GetById :one
select id, flake_id, done, scheduled_at from todos
where id = ?
limit 1
`

func (q *Queries) GetById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.FlakeID,
		&i.Done,
		&i.ScheduledAt,
	)
	return i, err
}

const setDone = `-- name: SetDone :exec
update todos
set done = ?
where id = ?
returning id, flake_id, done, scheduled_at
`

type SetDoneParams struct {
	Done int64 `json:"done"`
	ID   int64 `json:"id"`
}

func (q *Queries) SetDone(ctx context.Context, arg SetDoneParams) error {
	_, err := q.db.ExecContext(ctx, setDone, arg.Done, arg.ID)
	return err
}
