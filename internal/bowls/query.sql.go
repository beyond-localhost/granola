// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package bowls

import (
	"context"
)

const create = `-- name: Create :one
insert into bowls (name, description)
values (?, ?)
returning id, name, description
`

type CreateParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Bowl, error) {
	row := q.db.QueryRowContext(ctx, create, arg.Name, arg.Description)
	var i Bowl
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteById = `-- name: DeleteById :exec
delete from bowls
where id = ?
`

func (q *Queries) DeleteById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteById, id)
	return err
}

const getAll = `-- name: GetAll :many
select id, name, description from bowls
`

func (q *Queries) GetAll(ctx context.Context) ([]Bowl, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bowl{}
	for rows.Next() {
		var i Bowl
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getById = `-- name: GetById :one
select id, name, description from bowls
where id = ?
limit 1
`

func (q *Queries) GetById(ctx context.Context, id int64) (Bowl, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i Bowl
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateById = `-- name: UpdateById :one
update bowls
set
  name = coalesce(?1, name),
  description = coalesce(?2, description)
where id = ?3
returning id, name, description
`

type UpdateByIdParams struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	ID          int64   `json:"id"`
}

func (q *Queries) UpdateById(ctx context.Context, arg UpdateByIdParams) (Bowl, error) {
	row := q.db.QueryRowContext(ctx, updateById, arg.Name, arg.Description, arg.ID)
	var i Bowl
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
