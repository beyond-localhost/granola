// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package flakes

import (
	"context"
	"database/sql"
)

const create = `-- name: Create :one
insert into flakes (name, description, bowl_id)
values (?, ?, ?)
returning id, name, description, bowl_id
`

type CreateParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	BowlID      int64          `json:"bowlId"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Flake, error) {
	row := q.db.QueryRowContext(ctx, create, arg.Name, arg.Description, arg.BowlID)
	var i Flake
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BowlID,
	)
	return i, err
}

const deleteById = `-- name: DeleteById :exec
delete from flakes
where id = ?
`

func (q *Queries) DeleteById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteById, id)
	return err
}

const getAll = `-- name: GetAll :many
select id, name, description, bowl_id from flakes
`

func (q *Queries) GetAll(ctx context.Context) ([]Flake, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flake{}
	for rows.Next() {
		var i Flake
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.BowlID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllByBowlId = `-- name: GetAllByBowlId :many
select id, name, description, bowl_id from flakes
where bowl_id = ?
`

func (q *Queries) GetAllByBowlId(ctx context.Context, bowlID int64) ([]Flake, error) {
	rows, err := q.db.QueryContext(ctx, getAllByBowlId, bowlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flake{}
	for rows.Next() {
		var i Flake
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.BowlID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getById = `-- name: GetById :one
select id, name, description, bowl_id from flakes
where id = ?
limit 1
`

func (q *Queries) GetById(ctx context.Context, id int64) (Flake, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i Flake
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BowlID,
	)
	return i, err
}

const updateById = `-- name: UpdateById :one
update flakes
set
  name = coalesce(?1, name),
  description = coalesce(?2, description)
where id = ?3
returning id, name, description, bowl_id
`

type UpdateByIdParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateById(ctx context.Context, arg UpdateByIdParams) (Flake, error) {
	row := q.db.QueryRowContext(ctx, updateById, arg.Name, arg.Description, arg.ID)
	var i Flake
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BowlID,
	)
	return i, err
}
